// Code generated by mockery v2.45.1. DO NOT EDIT.

package rest

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// ServerInterface is an autogenerated mock type for the ServerInterface type
type ServerInterface struct {
	mock.Mock
}

type ServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ServerInterface) EXPECT() *ServerInterface_Expecter {
	return &ServerInterface_Expecter{mock: &_m.Mock}
}

// GetApiV1UsersUserIdTodos provides a mock function with given fields: w, r, userId
func (_m *ServerInterface) GetApiV1UsersUserIdTodos(w http.ResponseWriter, r *http.Request, userId string) {
	_m.Called(w, r, userId)
}

// ServerInterface_GetApiV1UsersUserIdTodos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV1UsersUserIdTodos'
type ServerInterface_GetApiV1UsersUserIdTodos_Call struct {
	*mock.Call
}

// GetApiV1UsersUserIdTodos is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - userId string
func (_e *ServerInterface_Expecter) GetApiV1UsersUserIdTodos(w interface{}, r interface{}, userId interface{}) *ServerInterface_GetApiV1UsersUserIdTodos_Call {
	return &ServerInterface_GetApiV1UsersUserIdTodos_Call{Call: _e.mock.On("GetApiV1UsersUserIdTodos", w, r, userId)}
}

func (_c *ServerInterface_GetApiV1UsersUserIdTodos_Call) Run(run func(w http.ResponseWriter, r *http.Request, userId string)) *ServerInterface_GetApiV1UsersUserIdTodos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(string))
	})
	return _c
}

func (_c *ServerInterface_GetApiV1UsersUserIdTodos_Call) Return() *ServerInterface_GetApiV1UsersUserIdTodos_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServerInterface_GetApiV1UsersUserIdTodos_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, string)) *ServerInterface_GetApiV1UsersUserIdTodos_Call {
	_c.Call.Return(run)
	return _c
}

// NewServerInterface creates a new instance of ServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServerInterface {
	mock := &ServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
