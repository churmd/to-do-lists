// Code generated by mockery v2.45.1. DO NOT EDIT.

package inboundports

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/churmd/to-do-lists/internal/domain/models"
)

// TodoLister is an autogenerated mock type for the TodoLister type
type TodoLister struct {
	mock.Mock
}

type TodoLister_Expecter struct {
	mock *mock.Mock
}

func (_m *TodoLister) EXPECT() *TodoLister_Expecter {
	return &TodoLister_Expecter{mock: &_m.Mock}
}

// GetTodos provides a mock function with given fields: ctx, userID
func (_m *TodoLister) GetTodos(ctx context.Context, userID models.UserID) ([]models.Todo, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetTodos")
	}

	var r0 []models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID) ([]models.Todo, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID) []models.Todo); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoLister_GetTodos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTodos'
type TodoLister_GetTodos_Call struct {
	*mock.Call
}

// GetTodos is a helper method to define mock.On call
//   - ctx context.Context
//   - userID models.UserID
func (_e *TodoLister_Expecter) GetTodos(ctx interface{}, userID interface{}) *TodoLister_GetTodos_Call {
	return &TodoLister_GetTodos_Call{Call: _e.mock.On("GetTodos", ctx, userID)}
}

func (_c *TodoLister_GetTodos_Call) Run(run func(ctx context.Context, userID models.UserID)) *TodoLister_GetTodos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UserID))
	})
	return _c
}

func (_c *TodoLister_GetTodos_Call) Return(_a0 []models.Todo, _a1 error) *TodoLister_GetTodos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoLister_GetTodos_Call) RunAndReturn(run func(context.Context, models.UserID) ([]models.Todo, error)) *TodoLister_GetTodos_Call {
	_c.Call.Return(run)
	return _c
}

// NewTodoLister creates a new instance of TodoLister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoLister(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoLister {
	mock := &TodoLister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
